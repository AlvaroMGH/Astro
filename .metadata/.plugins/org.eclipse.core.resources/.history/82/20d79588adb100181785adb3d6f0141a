package astrolib.coordinates;


/**
 * @author alvaro.gonzalez
 * @version 1.0
 * @created 05-sep-2018 10:22:41
 */
public class CircularCoordinate {
	

	private float degrees360; /** Degrees in interval [0-360[ */
	public float getDegrees360(){ return degrees360; }

	private float degrees180; /** Degrees in interval [0-180[ */
	public float getDegrees180() { return degrees180;  } 


	private int precision = 2;

	public void finalize() throws Throwable {

	}


	// Sexagesimal System
	private int sexagesimalDegrees;
	private int sexagesimalMinutes;
	private float sexagesimalSeconds;
	public int getSexagesimalDegrees()   { return sexagesimalDegrees; }
	public int getSexagesimalMinutes()   { return sexagesimalMinutes; }
	public float getSexagesimalSeconds() { return sexagesimalSeconds; }
	
	/**
	 * Default constructor 
	 * Set to 0º
	 */
	public CircularCoordinate() {
		setDegrees360( 0 );
	}
	
	/**
	 * Copy constructor
	 * @param c
	 */
	public CircularCoordinate( CircularCoordinate c)
	{
		setDegrees360( c.degrees360 );
	}


	/**
	 * @brief Convert into interval [0-360[
	 * 
	 * Example: 365º is convert to 5º
	 * @param degrees
	 */	
	public void setDegrees360(float degrees )
	{
		this.degrees360 = calculateDegrees360( degrees );
		calculateDegrees180();
		calculateSexagesimal(); // Save in format XXº YY' SS.SS''
	}
	
	

	/**
	 * Calculte the difference between current coordinate and the parameter coordinate
	 * @param cc subtrahend
	 * @return difference
	 */
	protected CircularCoordinate subtract( CircularCoordinate cc )
	{
		CircularCoordinate result = new CircularCoordinate( this );
		float fDegrees360Aux = this.degrees360 - cc.getDegrees360();
		result.setDegrees360(fDegrees360Aux);
		return result;
	}
	
	
	/**
	 * Calculte the sum of current coordinate and the parameter coordinate
	 * @param cc summand
	 * @return summ
	 */
	protected CircularCoordinate add( CircularCoordinate cc )
	{
		CircularCoordinate result = new CircularCoordinate( this );
		float fDegrees360Aux = this.degrees360 + cc.getDegrees360();
		result.setDegrees360(fDegrees360Aux);
		return result;
	}

	/**
	 * Normalizes the total of degrees to the interval [0-360[
	 * @param degrees
	 */
	protected float calculateDegrees360( float degrees )
	{
		/*
		float auxDegrees = degrees;

		if ( Math.abs(degrees) >= 360 )
		{
			auxDegrees = degrees % 360;
		}
		
		if ( auxDegrees < 0) 
		{
			auxDegrees += 360;
		}
		return auxDegrees;
		*/
		float degree360 = 0;
		
		int factor10 =  (int)Math.pow(10, precision);
		int powered360 = 360*factor10;
		
		int intDegrees = (int) (degrees *factor10);

				
		int intDegrees360 = intDegrees;
		if ( Math.abs(intDegrees) >= powered360 )
		{
			intDegrees360 = intDegrees % powered360;
		}
		
		if ( intDegrees360 < 0) 
		{
			intDegrees360 += powered360;
		}
		degree360 =  (float)intDegrees360 / factor10;
		
		return degree360;
	}
	
	
	/**
	 * Once set this.degrees360 sets degrees180 to the interval ]-180 - 180]
	 */
	protected void calculateDegrees180() {
		if ( this.degrees360 > 180)
		{
			this.degrees180 = this.degrees360 - 360;
		}
		else
		{
			this.degrees180 =  this.degrees360;
		}
	}
	
	
	/**
	 * @brief  Saves in format XXº YY' SS.SS''
	 */
	private void calculateSexagesimal()
	{
		this.sexagesimalDegrees = (int) (this.degrees360);
		float remainingDegrees = this.degrees360 - (float)this.sexagesimalDegrees;
		this.sexagesimalMinutes = (int) (remainingDegrees * 60);
		this.sexagesimalSeconds = this.degrees360 - (float)this.sexagesimalDegrees - (float)this.sexagesimalMinutes/60;		
	}	
	
	



}